/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __RUNQSLOWER_BPF_SUBSKEL_H__
#define __RUNQSLOWER_BPF_SUBSKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct runqslower_bpf {
	struct bpf_object *obj;
	struct bpf_object_subskeleton *subskel;
	struct {
		struct bpf_map *start;
		struct bpf_map *events;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *sched_wakeup;
		struct bpf_program *sched_wakeup_new;
		struct bpf_program *sched_switch;
		struct bpf_program *handle_sched_wakeup;
		struct bpf_program *handle_sched_wakeup_new;
		struct bpf_program *handle_sched_switch;
	} progs;
	struct runqslower_bpf__rodata {
		__u64 *min_us;
		pid_t *targ_pid;
		pid_t *targ_tgid;
	} rodata;

#ifdef __cplusplus
	static inline struct runqslower_bpf *open(const struct bpf_object *src);
	static inline void destroy(struct runqslower_bpf *skel);
#endif /* __cplusplus */
};

static inline void
runqslower_bpf__destroy(struct runqslower_bpf *skel)
{
	if (!skel)
		return;
	if (skel->subskel)
		bpf_object__destroy_subskeleton(skel->subskel);
	free(skel);
}

static inline struct runqslower_bpf *
runqslower_bpf__open(const struct bpf_object *src)
{
	struct runqslower_bpf *obj;
	struct bpf_object_subskeleton *s;
	int err;

	obj = (struct runqslower_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		err = -ENOMEM;
		goto err;
	}
	s = (struct bpf_object_subskeleton *)calloc(1, sizeof(*s));
	if (!s) {
		err = -ENOMEM;
		goto err;
	}
	s->sz = sizeof(*s);
	s->obj = src;
	s->var_skel_sz = sizeof(*s->vars);
	obj->subskel = s;

	/* vars */
	s->var_cnt = 3;
	s->vars = (struct bpf_var_skeleton *)calloc(3, sizeof(*s->vars));
	if (!s->vars) {
		err = -ENOMEM;
		goto err;
	}

	s->vars[0].name = "min_us";
	s->vars[0].map = &obj->maps.rodata;
	s->vars[0].addr = (void **) &obj->rodata.min_us;

	s->vars[1].name = "targ_pid";
	s->vars[1].map = &obj->maps.rodata;
	s->vars[1].addr = (void **) &obj->rodata.targ_pid;

	s->vars[2].name = "targ_tgid";
	s->vars[2].map = &obj->maps.rodata;
	s->vars[2].addr = (void **) &obj->rodata.targ_tgid;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "start";
	s->maps[0].map = &obj->maps.start;

	s->maps[1].name = "events";
	s->maps[1].map = &obj->maps.events;

	s->maps[2].name = ".rodata";
	s->maps[2].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 6;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "sched_wakeup";
	s->progs[0].prog = &obj->progs.sched_wakeup;

	s->progs[1].name = "sched_wakeup_new";
	s->progs[1].prog = &obj->progs.sched_wakeup_new;

	s->progs[2].name = "sched_switch";
	s->progs[2].prog = &obj->progs.sched_switch;

	s->progs[3].name = "handle_sched_wakeup";
	s->progs[3].prog = &obj->progs.handle_sched_wakeup;

	s->progs[4].name = "handle_sched_wakeup_new";
	s->progs[4].prog = &obj->progs.handle_sched_wakeup_new;

	s->progs[5].name = "handle_sched_switch";
	s->progs[5].prog = &obj->progs.handle_sched_switch;

	err = bpf_object__open_subskeleton(s);
	if (err)
		goto err;

	return obj;
err:
	runqslower_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

#ifdef __cplusplus
struct runqslower_bpf *runqslower_bpf::open(const struct bpf_object *src) { return runqslower_bpf__open(src); }
void runqslower_bpf::destroy(struct runqslower_bpf *skel) { runqslower_bpf__destroy(skel); }
#endif /* __cplusplus */

#endif /* __RUNQSLOWER_BPF_SUBSKEL_H__ */
